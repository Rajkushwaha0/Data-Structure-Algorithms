Mentored Solution: https://ideone.com/PDFsFf

//JAVA
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] ans=new int[2];
        HashMap<Integer,Integer> hm = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(hm.containsKey(target-nums[i])){
                ans[0]=hm.get(target-nums[i]);
                ans[1]=i;
                return ans;
            }
            hm.put(nums[i],i);
        }
        return ans;
    }
}


//O(n^2)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int c=0;
        int[] b;
        b= new int [2];
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[i]+nums[j]==target){
                    b[c]=i;
                    b[c+1]=j;
                    break;
                }
            }
        }
        return b;
        
    }
}


//O(n)
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        
        l=[]
        n=len(nums)
        for i in range (n):
            m=target-nums[i]
            if (m in nums and i!=nums.index(m)):
                l.append(i)
                l.append(nums.index(m))
                break
        return l
        
     
//O(n)   O(1)  
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] b={-1,-1};
        int i=0;
        int j=nums.length-1;
        int sum=0;
        while(i<j){
        sum=nums[i]+nums[j];
        if(sum==target){
                b[0]=i;
                b[1]=j;
                return b;
        }
        else if(sum>target){
                j--;
        
        }
        else{
                i--;
        }
    }
     return b;
        
    }
}
        
        
        
        


